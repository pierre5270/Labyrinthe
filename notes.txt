//Fonction fusion hs 
//Fonction Astar pareil

//Penser à faire une classe d'exception

void labyrinthe::fusion(int first_ID,int second_ID){

    getEdge(first_ID,second_ID)->open_wall();

    block *b1 = getBlock(first_ID);
    block *b2 = getBlock(second_ID);



    //valeur minimale entre les 2  blocs
    //int x = min(b1->getID(),b2->getID()) ;
    //cout << x << endl ;

    // si les chemins sont différents, on les fusionne
    
    if(b1->getChemin()[0] != b2->getChemin()[0]) {
        // on fusionne les deux chemins
        for (auto x : b2->getChemin()){
            b1->Setchemin(x) ;
            //getBlock(x)->setValue(min(b1->getID(),b2->getID()));
            
        }
    }

    for (auto x : b2->getChemin()){
        Chemins[x] = b1->getChemin() ;
        getBlock(x)->setValue(min(b1->getID(),b2->getID()));
        
    }
    /*
    if(b1->getValue() != b2->getValue()){
        b2->setValue(x);
        b1->setValue(x);
        b2->Setchemin(b1->getID());
        b1->Setchemin(b2->getID());
    
    }
    for(int i :b2->getChemin()){
        b1->Setchemin(i);
    }
    for(int i :b1->getChemin()){
        getBlock(i)->setValue(x);
    }*/
    
}